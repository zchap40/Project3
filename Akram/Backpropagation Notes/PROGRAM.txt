% bprop2m.m function, implementing the
% backpropagation learning algorithm
% with momentum.
% Akram S. Sadek, CNS 187

function S = bprop2m(X_in,D_out,hidden,W_i,V_i)

X = X_in;

D = D_out;

h = hidden; %Number of hidden layers

alpha = size(X,2); %Define dimension of alpha, number of examples

XZ_bias = -1*ones(1,alpha); % Create a bias vector

Xp = [XZ_bias; X]; %Concatenate the matrices. Xp is now (n+1) x alpha

n = size(X,1); %Number of inputs

m = size(D,1); %Number of outputs

%W = rand(h,n+1); %Create W and initialise

%V = rand(m,h+1); %Create V and initialise

W = W_i; %Create W and initialise

V = V_i; %Create V and initialise

%W = zeros(h,n+1); %Create W and initialise

%V = zeros(m,h+1); %Create V and initialise

E = 0;  %Initialise global error to zero

MU = 0.9; % Set momentum parameter

TAU = 0.1;

ITE = 20; %Number of for loop interations, MAIN

eta = zeros(ITE+1); 

eta(1) = 1; %Initialise eta to one

%Error = zeros(1,2000); %Create Error matrix for plotting error

for iter = 1:ITE %Main looper, iter is number of iterations
    
    %BEGIN FEEDFORWARD
    
    Z_bar = W*Xp; %Compute Z first
    
    Z = 1./(1. + exp(-1*Z_bar)); % Compute the sigma
    
    Zp = [XZ_bias; Z];
    
    Y_bar = V*Zp; %Compute outputs
    
    Y = 1./(1.+exp(-1*Y_bar)); %Compute the sigma
    
    %BEGIN BACKPROPAGATION
    
    eY = (Y - Y.*Y).*(Y - D);
    
    dEdV = eY*(Zp.');
    
    V_temp = V;
    
    V_temp(:,1) = [];
    
    eZ = (((eY.')*V_temp).').*(Z - Z.*Z);
        
    dEdW = eZ*(Xp.');
    
    V_old = V;
       
    W_old = W;
    
    V = V - eta(iter)*dEdV;% + MU*V;
    
    W = W - eta(iter)*dEdW;% + MU*W;
    
    % ADAPTIVE STEP ALGORITHM
    
    E_old = E;
    
    %PE = 0; %Initialise M to zero, summing variable for P.E. term
        
    %for a = 1:h        
    %    for b = 1:m            
    %        for c = 1:(n+1)                
    %            for d = 1:(h+1)
                    
     %              PE = PE + ((W(a,c) + V(b,d))^2);             
                    
     %           end 
     %       end 
     %   end       
    %end
    
    %PE = sum(sum(W+V));
    
     E_data1 = (Y - D).^2;
    E_data2 = sum(E_data1);
    E_data3 = sum(E_data2);
    
    
    E = 0.5*E_data3;% + 0.5*TAU*PE; %Global error including P.E. term
        
    Error(1,iter) = E;
    
    delta_E = E - E_old;
    
    if delta_E < 0
       
       eta(iter+1) = 1.1*eta(iter);
       
    else
       
       if delta_E >= 0 
        
       eta(iter+1) = 0.5*eta(iter); 
    
       V = V_old;
       
       W = W_old;
       
       end
       
    end
        
end

%p= 0;

%for a = 1:2
    
%    for b = 1:100
        
%        if Y(a,b)>0.6 && D(a,b)==1

 %           p = p + 1;
            
 %       end
        
 %       if Y(a,b)<0.4 && D(a,b)==0

%            p = p+1;

 %       end

 %   end
%end

%answer = p/2;

S = eta;

%S = [dEdV; dEdW]; % Top half of output is dEdV, bottom half is dEdW